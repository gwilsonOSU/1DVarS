function D = FC_hydroSedModel(bkgd)
%
% D.X.Y = derivative of Y w.r.t. X
%
% in more detail:
%
% D.X.Y(i,j) = dX(i)/dY(j), is the response of X(i) to a unit perturbation
% of Y(j), where i and j are grid points
%
% ...which is equal to the partial derivative of X(i) w.r.t. Y(j)
%
% In some cases, X or Y are non-vector (e.g. the scalar variable omega), in
% which case the 1st and/or 2nd dimension of D.X.Y will have length 1.
%

if(bkgd(1).nsubsteps>1)
  error('substepping not supported yet')
end

physicalConstants;

% get NL variables from saved workspace struct
fld=fields(bkgd);
for i=1:length(fld)
  eval([fld{i} ' = bkgd.' fld{i} ';']);
end

nx=length(x);
vec0=zeros(nx,1);

%--------------------------------------
% begin TL
%--------------------------------------

% 1DH wave and longshore current balance
% [tl_Hrms,tl_theta,tl_vbar,tl_kabs,tl_Ew,tl_Er,tl_Dr] = ...
%     tl_hydro_ruessink2001(tl_h,tl_H0,tl_theta0,tl_omega,tl_ka_drag,tl_tau_wind,tl_detady,tl_dgamma,tl_beta0,hydro_bkgd);
for i=1:nx
  vec1=vec0;
  vec1(i)=1;  % comb
  [D.Hrms.h(:,i) ,...
   D.theta.h(:,i),...
   D.vbar.h(:,i) ,...
   D.kabs.h(:,i) ,...
   D.Ew.h(:,i)   ,...
   D.Er.h(:,i)   ,...
   D.Dr.h(:,i)   ] = ...
      tl_hydro_ruessink2001(vec1,... tl.h,...
                            0,... tl.H0,...
                            0,... tl.theta0,...
                            0,... tl.omega,...
                            0,... tl.ka_drag,...
                            [vec0 vec0],... tl.tau_wind,...
                            vec0,... tl.detady,...
                            vec0,... tl.dgamma,...
                            0,... tl.beta0,...
                            hydro_bkgd);
  [D.Hrms.tau_windx(:,i) ,...
   D.theta.tau_windx(:,i),...
   D.vbar.tau_windx(:,i) ,...
   D.kabs.tau_windx(:,i) ,...
   D.Ew.tau_windx(:,i)   ,...
   D.Er.tau_windx(:,i)   ,...
   D.Dr.tau_windx(:,i)   ] = ...
      tl_hydro_ruessink2001(vec0,... tl.h,...
                            0,... tl.H0,...
                            0,... tl.theta0,...
                            0,... tl.omega,...
                            0,... tl.ka_drag,...
                            [vec1 vec0],... tl.tau_wind,...
                            vec0,... tl.detady,...
                            vec0,... tl.dgamma,...
                            0,... tl.beta0,...
                            hydro_bkgd);
  [D.Hrms.tau_windy(:,i) ,...
   D.theta.tau_windy(:,i),...
   D.vbar.tau_windy(:,i) ,...
   D.kabs.tau_windy(:,i) ,...
   D.Ew.tau_windy(:,i)   ,...
   D.Er.tau_windy(:,i)   ,...
   D.Dr.tau_windy(:,i)   ] = ...
      tl_hydro_ruessink2001(vec0,... tl.h,...
                            0,... tl.H0,...
                            0,... tl.theta0,...
                            0,... tl.omega,...
                            0,... tl.ka_drag,...
                            [vec0 vec1],... tl.tau_wind,...
                            vec0,... tl.detady,...
                            vec0,... tl.dgamma,...
                            0,... tl.beta0,...
                            hydro_bkgd);
  [D.Hrms.detady(:,i) ,...
   D.theta.detady(:,i),...
   D.vbar.detady(:,i) ,...
   D.kabs.detady(:,i) ,...
   D.Ew.detady(:,i)   ,...
   D.Er.detady(:,i)   ,...
   D.Dr.detady(:,i)   ] = ...
      tl_hydro_ruessink2001(vec0,... tl.h,...
                            0,... tl.H0,...
                            0,... tl.theta0,...
                            0,... tl.omega,...
                            0,... tl.ka_drag,...
                            [vec0 vec0],... tl.tau_wind,...
                            vec1,... tl.detady,...
                            vec0,... tl.dgamma,...
                            0,... tl.beta0,...
                            hydro_bkgd);
end
[D.Hrms.H0(:,1) ,...
 D.theta.H0(:,1),...
 D.vbar.H0(:,1) ,...
 D.kabs.H0(:,1) ,...
 D.Ew.H0(:,1)   ,...
 D.Er.H0(:,1)   ,...
 D.Dr.H0(:,1)   ] = ...
    tl_hydro_ruessink2001(vec0,... tl.h,...
                          1,... tl.H0,...
                          0,... tl.theta0,...
                          0,... tl.omega,...
                          0,... tl.ka_drag,...
                          [vec0 vec0],... tl.tau_wind,...
                          vec0,... tl.detady,...
                          vec0,... tl.dgamma,...
                          0,... tl.beta0,...
                          hydro_bkgd);
[D.Hrms.theta0(:,1) ,...
 D.theta.theta0(:,1),...
 D.vbar.theta0(:,1) ,...
 D.kabs.theta0(:,1) ,...
 D.Ew.theta0(:,1)   ,...
 D.Er.theta0(:,1)   ,...
 D.Dr.theta0(:,1)   ] = ...
    tl_hydro_ruessink2001(vec0,... tl.h,...
                          0,... tl.H0,...
                          1,... tl.theta0,...
                          0,... tl.omega,...
                          0,... tl.ka_drag,...
                          [vec0 vec0],... tl.tau_wind,...
                          vec0,... tl.detady,...
                          vec0,... tl.dgamma,...
                          0,... tl.beta0,...
                          hydro_bkgd);
[D.Hrms.omega(:,1) ,...
 D.theta.omega(:,1),...
 D.vbar.omega(:,1) ,...
 D.kabs.omega(:,1) ,...
 D.Ew.omega(:,1)   ,...
 D.Er.omega(:,1)   ,...
 D.Dr.omega(:,1)   ] = ...
    tl_hydro_ruessink2001(vec0,... tl.h,...
                          0,... tl.H0,...
                          0,... tl.theta0,...
                          1,... tl.omega,...
                          0,... tl.ka_drag,...
                          [vec0 vec0],... tl.tau_wind,...
                          vec0,... tl.detady,...
                          vec0,... tl.dgamma,...
                          0,... tl.beta0,...
                          hydro_bkgd);
[D.Hrms.ka_drag(:,1) ,...
 D.theta.ka_drag(:,1),...
 D.vbar.ka_drag(:,1) ,...
 D.kabs.ka_drag(:,1) ,...
 D.Ew.ka_drag(:,1)   ,...
 D.Er.ka_drag(:,1)   ,...
 D.Dr.ka_drag(:,1)   ] = ...
    tl_hydro_ruessink2001(vec0,... tl.h,...
                          0,... tl.H0,...
                          0,... tl.theta0,...
                          0,... tl.omega,...
                          1,... tl.ka_drag,...
                          [vec0 vec0],... tl.tau_wind,...
                          vec0,... tl.detady,...
                          vec0,... tl.dgamma,...
                          0,... tl.beta0,...
                          hydro_bkgd);
  [D.Hrms.beta0(:,1) ,...
   D.theta.beta0(:,1),...
   D.vbar.beta0(:,1) ,...
   D.kabs.beta0(:,1) ,...
   D.Ew.beta0(:,1)   ,...
   D.Er.beta0(:,1)   ,...
   D.Dr.beta0(:,1)   ] = ...
      tl_hydro_ruessink2001(vec0,... tl.h,...
                            0,... tl.H0,...
                            0,... tl.theta0,...
                            0,... tl.omega,...
                            0,... tl.ka_drag,...
                            [vec0 vec0],... tl.tau_wind,...
                            vec0,... tl.detady,...
                            vec0,... tl.dgamma,...
                            1,... tl.beta0,...
                            hydro_bkgd);

% don't allow Dr==0, otherwise the undertow model will be discontinuous at
% the break point. Also apply masking to hydro outputs
% tl.Dr(Drmask)=0;
% tl.Hrms (imask)=0;
% tl.vbar (imask)=0;
% tl.Ew   (imask)=0;
% tl.Er   (imask)=0;
% tl.Dr   (imask)=0;
fld1={'Hrms','theta','vbar','kabs','Ew','Er','Dr'};
fld2={'h','H0','theta0','omega','ka_drag','tau_windx',...
      'tau_windy','detady','beta0'};
for i1=1:length(fld1)
  this1=getfield(D,fld1{i1});
  for i2=1:length(fld2)
    this2=getfield(this1,fld2{i2});
    for j=1:length(imask)
      this2(imask(j),:)=0;
      this2(:,imask(j))=0;
    end
    this1=setfield(this1,fld2{i2},this2);
  end
  D=setfield(D,fld1{i1},this1);
end

% wave shape parameters.  Note Uwave_ruessink2012 specifies Hmo as input
% tl.Hmo=1.4*tl.Hrms;
% [tl.Aw,tl.Sw,tl.Uw]=tl_Uwave_ruessink2012_params(tl.Hmo,tl.kabs,tl.omega,tl.h,uwave_bkgd);
for i=1:nx
  vec1=vec0;
  vec1(i)=1;  % comb
  [D.Aw.Hrms(:,i),...
   D.Sw.Hrms(:,i),...
   D.Uw.Hrms(:,i)] = tl_Uwave_ruessink2012_params(1.4*vec1,... tl.Hmo,...
                                                  vec0,... tl.kabs,...
                                                  0,... tl.omega,...
                                                  vec0,... tl.h,...
                                                  uwave_bkgd);
  [D.Aw.kabs(:,i),...
   D.Sw.kabs(:,i),...
   D.Uw.kabs(:,i)] = tl_Uwave_ruessink2012_params(vec0,... tl.Hmo,...
                                                  vec1,... tl.kabs,...
                                                  0,... tl.omega,...
                                                  vec0,... tl.h,...
                                                  uwave_bkgd);
  [D.Aw.h(:,i),...
   D.Sw.h(:,i),...
   D.Uw.h(:,i)] = tl_Uwave_ruessink2012_params(vec0,... tl.Hmo,...
                                                  vec0,... tl.kabs,...
                                                  0,... tl.omega,...
                                                  vec1,... tl.h,...
                                                  uwave_bkgd);
end
[D.Aw.omega(:,1),...
 D.Sw.omega(:,1),...
 D.Uw.omega(:,1)] = tl_Uwave_ruessink2012_params(vec0,... tl.Hmo,...
                                                vec0,... tl.kabs,...
                                                1,... tl.omega,...
                                                vec0,... tl.h,...
                                                uwave_bkgd);

% convert from (kabs,theta) to vector wavenumber, and calculate c for
% convenience
% tl.k(:,1) = ...
%     + tl.kabs(:).*cos(theta(:)) ...
%     - kabs(:).*sin(theta(:)).*tl.theta;
D.kx.kabs = diag(cos(theta(:)));
D.kx.theta = diag(-kabs(:).*sin(theta(:)));
% tl.k(:,2) = ...
%     + tl.kabs(:).*sin(theta(:)) ...
%     + kabs(:).*cos(theta(:)).*tl.theta;
D.ky.kabs = diag(sin(theta(:)));
D.ky.theta = diag(kabs(:).*cos(theta(:)));
% tl.c = ...
%     + tl.omega./kabs ...
%     - omega./kabs.^2.*tl.kabs;
D.c.omega = diag(1./kabs);
D.c.kabs = diag(-omega./kabs.^2);

% depth averaged mean flow, Nx2 vector, +'ve onshore
% tl.ubar0(:,1) = ...
%     - (tl.Ew+2*tl.Er)./(rho*c.*h) ...
%     + (Ew+2*Er)./(rho*c.*h).^2.*rho.*( ...
%         tl.c.*h + tl.h.*c );
% tl.ubar0(:,2) = tl.vbar;
D.ubar0x.Ew=-diag(1./(rho*c.*h));
D.ubar0x.Er=-diag(2./(rho*c.*h));
D.ubar0x.c =diag((Ew+2*Er)./(rho*c.*h).^2.*rho.*h);
D.ubar0x.h =diag((Ew+2*Er)./(rho*c.*h).^2.*rho.*c);
D.ubar0y.vbar=eye(nx);

% settling velocity: use Brown & Lawler.  For vanderA use 0.8*d50
% here, per explanation on page 29
if(strcmp(sedmodel,'vanderA'))
  % tl.d50_8 = .8*tl.d50;
  % tl.ws = tl_ws_brownLawler(tl.d50_8,.8*d50);
  for i=1:nx
    vec1=vec0;
    vec1(i)=1;
    D.ws.d50(:,i) = tl_ws_brownLawler(.8*vec1,.8*d50);
  end
else
  error('Full-chain TL only available for vanderA sediment transport module at this time')
end

% OPTIONAL: Dubarbier et al. suggest a modification to the mean velocity
% prior to calculation of undertow (udelta)
if(params.lambda>0)
  % tl.ubar = tl_dubarbierUmod(tl.ubar0,tl.kabs,tl.params.lambda,ubar0,kabs,params.lambda,x);
  for i=1:nx
    vec1=vec0;
    vec1(i)=1;
    Dtmp.ubar.ubar0x(:,i,:) = ...
        tl_dubarbierUmod([vec1 vec0] ,... tl.ubar0,...
                         vec0  ,... tl.kabs,...
                         0,... tl.params.lambda,...
                         ubar0,kabs,params.lambda,x);
    Dtmp.ubar.ubar0y(:,i,:) = ...
        tl_dubarbierUmod([vec0 vec1] ,... tl.ubar0,...
                         vec0  ,... tl.kabs,...
                         0,... tl.params.lambda,...
                         ubar0,kabs,params.lambda,x);
    Dtmp.ubar.kabs(:,i,:) = ...
        tl_dubarbierUmod([vec0 vec0] ,... tl.ubar0,...
                         vec1  ,... tl.kabs,...
                         0,... tl.params.lambda,...
                         ubar0,kabs,params.lambda,x);
  end
  Dtmp.ubar.params_lambda(:,1,:) = ...
      tl_dubarbierUmod([vec0 vec0] ,... tl.ubar0,...
                       vec1  ,... tl.kabs,...
                       1,... tl.params.lambda,...
                       ubar0,kabs,params.lambda,x);
  D.ubarx.ubar0x=Dtmp.ubar.ubar0x(:,:,1);
  D.ubary.ubar0x=Dtmp.ubar.ubar0x(:,:,2);
  D.ubarx.ubar0y=Dtmp.ubar.ubar0y(:,:,1);
  D.ubary.ubar0y=Dtmp.ubar.ubar0y(:,:,2);
  D.ubarx.kabs=Dtmp.ubar.kabs(:,:,1);
  D.ubary.kabs=Dtmp.ubar.kabs(:,:,2);
  D.ubarx.params_lambda=Dtmp.ubar.params_lambda(:,:,1);
  D.ubary.params_lambda=Dtmp.ubar.params_lambda(:,:,2);
else
  % tl.ubar = tl.ubar0;
  D.ubarx.ubar0x=eye(nx);
  D.ubary.ubar0y=eye(nx);
end

% Reniers et al. (2004) model for velocity at top of boundary layer
% tl.delta_bl=zeros(nx,1);  % init
% tl.udelta=tl.ubar;   % init
% for i=1:nx
%   if(Dr(i)>0)
%     [tl.udelta(i,:),tl.delta_bl(i)] = ...
%         tl_udelta_reniers2004(tl.ubar(i,:),tl.k(i,:),tl.omega,...
%                               tl.h(i),tl.Hrms(i),tl.detady(i),...
%                               tl.tau_wind(i,:),tl.Dr(i),tl.params.fv,tl.params.ks,tl.d50(i),...
%                               udel_bkgd(i));
%   end
% end
for i=1:nx  % i = perturbation index
  if(Dr(i)>0)
    [Dtmp.udelta.ubarx(i,i,:),...
     D.delta_bl.ubarx(i,i)] = ...
        tl_udelta_reniers2004([1 0],... tl.ubar(i,:),...
                              [0 0],... tl.k(i,:),...
                              0,... tl.omega,...
                              0,... tl.h(i),...
                              0,... tl.Hrms(i),...
                              0,... tl.detady(i),...
                              [0 0],... tl.tau_wind(i,:),...
                              0,... tl.Dr(i),...
                              0,... tl.params.fv,...
                              0,... tl.params.ks,...
                              0,... tl.d50(i),...
                              udel_bkgd(i));
    [Dtmp.udelta.ubary(i,i,:),...
     D.delta_bl.ubary(i,i)] = ...
        tl_udelta_reniers2004([0 1],... tl.ubar(i,:),...
                              [0 0],... tl.k(i,:),...
                              0,... tl.omega,...
                              0,... tl.h(i),...
                              0,... tl.Hrms(i),...
                              0,... tl.detady(i),...
                              [0 0],... tl.tau_wind(i,:),...
                              0,... tl.Dr(i),...
                              0,... tl.params.fv,...
                              0,... tl.params.ks,...
                              0,... tl.d50(i),...
                              udel_bkgd(i));
    [Dtmp.udelta.kx(i,i,:),...
     D.delta_bl.kx(i,i)] = ...
        tl_udelta_reniers2004([0 0],... tl.ubar(i,:),...
                              [1 0],... tl.k(i,:),...
                              0,... tl.omega,...
                              0,... tl.h(i),...
                              0,... tl.Hrms(i),...
                              0,... tl.detady(i),...
                              [0 0],... tl.tau_wind(i,:),...
                              0,... tl.Dr(i),...
                              0,... tl.params.fv,...
                              0,... tl.params.ks,...
                              0,... tl.d50(i),...
                              udel_bkgd(i));
    [Dtmp.udelta.ky(i,i,:),...
     D.delta_bl.ky(i,i)] = ...
        tl_udelta_reniers2004([0 0],... tl.ubar(i,:),...
                              [0 1],... tl.k(i,:),...
                              0,... tl.omega,...
                              0,... tl.h(i),...
                              0,... tl.Hrms(i),...
                              0,... tl.detady(i),...
                              [0 0],... tl.tau_wind(i,:),...
                              0,... tl.Dr(i),...
                              0,... tl.params.fv,...
                              0,... tl.params.ks,...
                              0,... tl.d50(i),...
                              udel_bkgd(i));
    [Dtmp.udelta.h(i,i,:),...
     D.delta_bl.h(i,i)] = ...
        tl_udelta_reniers2004([0 0],... tl.ubar(i,:),...
                              [0 0],... tl.k(i,:),...
                              0,... tl.omega,...
                              1,... tl.h(i),...
                              0,... tl.Hrms(i),...
                              0,... tl.detady(i),...
                              [0 0],... tl.tau_wind(i,:),...
                              0,... tl.Dr(i),...
                              0,... tl.params.fv,...
                              0,... tl.params.ks,...
                              0,... tl.d50(i),...
                              udel_bkgd(i));
    [Dtmp.udelta.Hrms(i,i,:),...
     D.delta_bl.Hrms(i,i)] = ...
        tl_udelta_reniers2004([0 0],... tl.ubar(i,:),...
                              [0 0],... tl.k(i,:),...
                              0,... tl.omega,...
                              0,... tl.h(i),...
                              1,... tl.Hrms(i),...
                              0,... tl.detady(i),...
                              [0 0],... tl.tau_wind(i,:),...
                              0,... tl.Dr(i),...
                              0,... tl.params.fv,...
                              0,... tl.params.ks,...
                              0,... tl.d50(i),...
                              udel_bkgd(i));
    [Dtmp.udelta.detady(i,i,:),...
     D.delta_bl.detady(i,i)] = ...
        tl_udelta_reniers2004([0 0],... tl.ubar(i,:),...
                              [0 0],... tl.k(i,:),...
                              0,... tl.omega,...
                              0,... tl.h(i),...
                              0,... tl.Hrms(i),...
                              1,... tl.detady(i),...
                              [0 0],... tl.tau_wind(i,:),...
                              0,... tl.Dr(i),...
                              0,... tl.params.fv,...
                              0,... tl.params.ks,...
                              0,... tl.d50(i),...
                              udel_bkgd(i));
    [Dtmp.udelta.tauwindx(i,i,:),...
     D.delta_bl.tauwindx(i,i)] = ...
        tl_udelta_reniers2004([0 0],... tl.ubar(i,:),...
                              [0 0],... tl.k(i,:),...
                              0,... tl.omega,...
                              0,... tl.h(i),...
                              0,... tl.Hrms(i),...
                              0,... tl.detady(i),...
                              [1 0],... tl.tau_wind(i,:),...
                              0,... tl.Dr(i),...
                              0,... tl.params.fv,...
                              0,... tl.params.ks,...
                              0,... tl.d50(i),...
                              udel_bkgd(i));
    [Dtmp.udelta.tauwindy(i,i,:),...
     D.delta_bl.tauwindy(i,i)] = ...
        tl_udelta_reniers2004([0 0],... tl.ubar(i,:),...
                              [0 0],... tl.k(i,:),...
                              0,... tl.omega,...
                              0,... tl.h(i),...
                              0,... tl.Hrms(i),...
                              0,... tl.detady(i),...
                              [0 1],... tl.tau_wind(i,:),...
                              0,... tl.Dr(i),...
                              0,... tl.params.fv,...
                              0,... tl.params.ks,...
                              0,... tl.d50(i),...
                              udel_bkgd(i));
    [Dtmp.udelta.Dr(i,i,:),...
     D.delta_bl.Dr(i,i)] = ...
        tl_udelta_reniers2004([0 0],... tl.ubar(i,:),...
                              [0 0],... tl.k(i,:),...
                              0,... tl.omega,...
                              0,... tl.h(i),...
                              0,... tl.Hrms(i),...
                              0,... tl.detady(i),...
                              [0 0],... tl.tau_wind(i,:),...
                              1,... tl.Dr(i),...
                              0,... tl.params.fv,...
                              0,... tl.params.ks,...
                              0,... tl.d50(i),...
                              udel_bkgd(i));
    [Dtmp.udelta.d50(i,i,:),...
     D.delta_bl.d50(i,i)] = ...
        tl_udelta_reniers2004([0 0],... tl.ubar(i,:),...
                              [0 0],... tl.k(i,:),...
                              0,... tl.omega,...
                              0,... tl.h(i),...
                              0,... tl.Hrms(i),...
                              0,... tl.detady(i),...
                              [0 0],... tl.tau_wind(i,:),...
                              0,... tl.Dr(i),...
                              0,... tl.params.fv,...
                              0,... tl.params.ks,...
                              1,... tl.d50(i),...
                              udel_bkgd(i));
    [Dtmp.udelta.omega(i,1,:),...
     D.delta_bl.omega(i,1)] = ...
        tl_udelta_reniers2004([0 0],... tl.ubar(i,:),...
                              [0 0],... tl.k(i,:),...
                              1,... tl.omega,...
                              0,... tl.h(i),...
                              0,... tl.Hrms(i),...
                              0,... tl.detady(i),...
                              [0 0],... tl.tau_wind(i,:),...
                              0,... tl.Dr(i),...
                              0,... tl.params.fv,...
                              0,... tl.params.ks,...
                              0,... tl.d50(i),...
                              udel_bkgd(i));
    [Dtmp.udelta.params_fv(i,1,:),...
     D.delta_bl.params_fv(i,1)] = ...
        tl_udelta_reniers2004([0 0],... tl.ubar(i,:),...
                              [0 0],... tl.k(i,:),...
                              0,... tl.omega,...
                              0,... tl.h(i),...
                              0,... tl.Hrms(i),...
                              0,... tl.detady(i),...
                              [0 0],... tl.tau_wind(i,:),...
                              0,... tl.Dr(i),...
                              1,... tl.params.fv,...
                              0,... tl.params.ks,...
                              0,... tl.d50(i),...
                              udel_bkgd(i));
    [Dtmp.udelta.params_ks(i,1,:),...
     D.delta_bl.params_ks(i,1)] = ...
        tl_udelta_reniers2004([0 0],... tl.ubar(i,:),...
                              [0 0],... tl.k(i,:),...
                              0,... tl.omega,...
                              0,... tl.h(i),...
                              0,... tl.Hrms(i),...
                              0,... tl.detady(i),...
                              [0 0],... tl.tau_wind(i,:),...
                              0,... tl.Dr(i),...
                              0,... tl.params.fv,...
                              1,... tl.params.ks,...
                              0,... tl.d50(i),...
                              udel_bkgd(i));
  else
    Dtmp.udelta.ubarx(i,i,:)=[0 0];
    D.delta_bl.ubarx(i,i)=0;
    Dtmp.udelta.ubary(i,i,:)=[0 0];
    D.delta_bl.ubary(i,i)=0;
    Dtmp.udelta.kx(i,i,:)=[0 0];
    D.delta_bl.kx(i,i)=0;
    Dtmp.udelta.ky(i,i,:)=[0 0];
    D.delta_bl.ky(i,i)=0;
    Dtmp.udelta.h(i,i,:)=[0 0];
    D.delta_bl.h(i,i)=0;
    Dtmp.udelta.Hrms(i,i,:)=[0 0];
    D.delta_bl.Hrms(i,i)=0;
    Dtmp.udelta.detady(i,i,:)=[0 0];
    D.delta_bl.detady(i,i)=0;
    Dtmp.udelta.tauwindx(i,i,:)=[0 0];
    D.delta_bl.tauwindx(i,i)=0;
    Dtmp.udelta.tauwindy(i,i,:)=[0 0];
    D.delta_bl.tauwindy(i,i)=0;
    Dtmp.udelta.Dr(i,i,:)=[0 0];
    D.delta_bl.Dr(i,i)=0;
    Dtmp.udelta.d50(i,i,:)=[0 0];
    D.delta_bl.d50(i,i)=0;
    Dtmp.udelta.omega(i,1,:)=[0 0];
    D.delta_bl.omega(i,1)=0;
    Dtmp.udelta.params_fv(i,1,:)=[0 0];
    D.delta_bl.params_fv(i,1)=0;
    Dtmp.udelta.params_ks(i,1,:)=[0 0];
    D.delta_bl.params_ks(i,1)=0;
  end
end
fld=fields(Dtmp.udelta);  % need to break d(udelta)/d(*) into udeltax and udeltay
for i=1:length(fld)
  for ix=1:2
    if(ix==1)
      xx='x';
    else
      xx='y';
    end
    eval(['D.udelta' xx '.' fld{i} '=Dtmp.udelta.' fld{i} '(:,:,ix);']);
  end
end

% rotate udelta into wave direction, as assumed by sed transport equations
% udelta_w(:,1) = +udelta(:,1).*cos(theta) + udelta(:,2).*sin(theta);
% tl.udelta_w(:,1) = ...
%     + tl.udelta(:,1).*cos(theta) ...
%     - udelta(:,1).*sin(theta).*tl.theta ...
%     + tl.udelta(:,2).*sin(theta) ...
%     + udelta(:,2).*cos(theta).*tl.theta;
% % udelta_w(:,2) = -udelta(:,1).*sin(theta) + udelta(:,2).*cos(theta);
% tl.udelta_w(:,2) = ...
%     - tl.udelta(:,1).*sin(theta) ...
%     - udelta(:,1).*cos(theta).*tl.theta ...
%     + tl.udelta(:,2).*cos(theta) ...
%     - udelta(:,2).*sin(theta).*tl.theta;

% run the requested model for sediment flux (m2/s)
% tl.tanbeta = tl_calcTanbeta(tl.h,x)';
for i=1:nx
  vec1=vec0;
  vec1(i)=1;
  D.tanbeta.h(:,i) = tl_calcTanbeta(vec1,x)';
end
if(strcmp(sedmodel,'vanderA'))  % van Der A et al. (2013)
  % tl.Q0 = tl_qtrans_vanderA(tl.d50,tl.d90,tl.h,tl.tanbeta,tl.Hrms,tl.kabs,tl.omega,...
  %                           tl.udelta,tl.delta_bl,tl.ws,tl.Aw,tl.Sw,tl.Uw,tl.params,bkgd_qtrans);
  params0.alpha=0;
  params0.xi=0;
  params0.m=0;
  params0.n=0;
  for i=1:nx
    vec1=vec0;
    vec1(i)=1;  % comb
    D.Q0.d50(:,i) = tl_qtrans_vanderA(vec1,... tl.d50,...
                             vec0,... tl.d90,...
                             vec0,... tl.h,...
                             vec0,... tl.tanbeta,...
                             vec0,... tl.Hrms,...
                             vec0,... tl.kabs,...
                             0,... tl.omega,...
                             [vec0 vec0],... tl.udelta,...
                             vec0,... tl.delta_bl,...
                             vec0,... tl.ws,...
                             vec0,... tl.Aw,...
                             vec0,... tl.Sw,...
                             vec0,... tl.Uw,...
                             params0,... tl.params,...
                             bkgd_qtrans);
    D.Q0.d90(:,i) = tl_qtrans_vanderA(vec0,... tl.d50,...
                             vec1,... tl.d90,...
                             vec0,... tl.h,...
                             vec0,... tl.tanbeta,...
                             vec0,... tl.Hrms,...
                             vec0,... tl.kabs,...
                             0,... tl.omega,...
                             [vec0 vec0],... tl.udelta,...
                             vec0,... tl.delta_bl,...
                             vec0,... tl.ws,...
                             vec0,... tl.Aw,...
                             vec0,... tl.Sw,...
                             vec0,... tl.Uw,...
                             params0,... tl.params,...
                             bkgd_qtrans);
    D.Q0.h(:,i) = tl_qtrans_vanderA(vec0,... tl.d50,...
                             vec0,... tl.d90,...
                             vec1,... tl.h,...
                             vec0,... tl.tanbeta,...
                             vec0,... tl.Hrms,...
                             vec0,... tl.kabs,...
                             0,... tl.omega,...
                             [vec0 vec0],... tl.udelta,...
                             vec0,... tl.delta_bl,...
                             vec0,... tl.ws,...
                             vec0,... tl.Aw,...
                             vec0,... tl.Sw,...
                             vec0,... tl.Uw,...
                             params0,... tl.params,...
                             bkgd_qtrans);
    D.Q0.tanbeta(:,i) = tl_qtrans_vanderA(vec0,... tl.d50,...
                             vec0,... tl.d90,...
                             vec0,... tl.h,...
                             vec1,... tl.tanbeta,...
                             vec0,... tl.Hrms,...
                             vec0,... tl.kabs,...
                             0,... tl.omega,...
                             [vec0 vec0],... tl.udelta,...
                             vec0,... tl.delta_bl,...
                             vec0,... tl.ws,...
                             vec0,... tl.Aw,...
                             vec0,... tl.Sw,...
                             vec0,... tl.Uw,...
                             params0,... tl.params,...
                             bkgd_qtrans);
    D.Q0.Hrms(:,i) = tl_qtrans_vanderA(vec0,... tl.d50,...
                             vec0,... tl.d90,...
                             vec0,... tl.h,...
                             vec0,... tl.tanbeta,...
                             vec1,... tl.Hrms,...
                             vec0,... tl.kabs,...
                             0,... tl.omega,...
                             [vec0 vec0],... tl.udelta,...
                             vec0,... tl.delta_bl,...
                             vec0,... tl.ws,...
                             vec0,... tl.Aw,...
                             vec0,... tl.Sw,...
                             vec0,... tl.Uw,...
                             params0,... tl.params,...
                             bkgd_qtrans);
    D.Q0.kabs(:,i) = tl_qtrans_vanderA(vec0,... tl.d50,...
                             vec0,... tl.d90,...
                             vec0,... tl.h,...
                             vec0,... tl.tanbeta,...
                             vec0,... tl.Hrms,...
                             vec1,... tl.kabs,...
                             0,... tl.omega,...
                             [vec0 vec0],... tl.udelta,...
                             vec0,... tl.delta_bl,...
                             vec0,... tl.ws,...
                             vec0,... tl.Aw,...
                             vec0,... tl.Sw,...
                             vec0,... tl.Uw,...
                             params0,... tl.params,...
                             bkgd_qtrans);
    D.Q0.udeltax(:,i) = tl_qtrans_vanderA(vec0,... tl.d50,...
                             vec0,... tl.d90,...
                             vec0,... tl.h,...
                             vec0,... tl.tanbeta,...
                             vec0,... tl.Hrms,...
                             vec0,... tl.kabs,...
                             0,... tl.omega,...
                             [vec1 vec0],... tl.udelta,...
                             vec0,... tl.delta_bl,...
                             vec0,... tl.ws,...
                             vec0,... tl.Aw,...
                             vec0,... tl.Sw,...
                             vec0,... tl.Uw,...
                             params0,... tl.params,...
                             bkgd_qtrans);
    D.Q0.udeltay(:,i) = tl_qtrans_vanderA(vec0,... tl.d50,...
                             vec0,... tl.d90,...
                             vec0,... tl.h,...
                             vec0,... tl.tanbeta,...
                             vec0,... tl.Hrms,...
                             vec0,... tl.kabs,...
                             0,... tl.omega,...
                             [vec0 vec1],... tl.udelta,...
                             vec0,... tl.delta_bl,...
                             vec0,... tl.ws,...
                             vec0,... tl.Aw,...
                             vec0,... tl.Sw,...
                             vec0,... tl.Uw,...
                             params0,... tl.params,...
                             bkgd_qtrans);
    D.Q0.delta_bl(:,i) = tl_qtrans_vanderA(vec0,... tl.d50,...
                             vec0,... tl.d90,...
                             vec0,... tl.h,...
                             vec0,... tl.tanbeta,...
                             vec0,... tl.Hrms,...
                             vec0,... tl.kabs,...
                             0,... tl.omega,...
                             [vec0 vec0],... tl.udelta,...
                             vec1,... tl.delta_bl,...
                             vec0,... tl.ws,...
                             vec0,... tl.Aw,...
                             vec0,... tl.Sw,...
                             vec0,... tl.Uw,...
                             params0,... tl.params,...
                             bkgd_qtrans);
    D.Q0.ws(:,i) = tl_qtrans_vanderA(vec0,... tl.d50,...
                             vec0,... tl.d90,...
                             vec0,... tl.h,...
                             vec0,... tl.tanbeta,...
                             vec0,... tl.Hrms,...
                             vec0,... tl.kabs,...
                             0,... tl.omega,...
                             [vec0 vec0],... tl.udelta,...
                             vec0,... tl.delta_bl,...
                             vec1,... tl.ws,...
                             vec0,... tl.Aw,...
                             vec0,... tl.Sw,...
                             vec0,... tl.Uw,...
                             params0,... tl.params,...
                             bkgd_qtrans);
    D.Q0.Aw(:,i) = tl_qtrans_vanderA(vec0,... tl.d50,...
                             vec0,... tl.d90,...
                             vec0,... tl.h,...
                             vec0,... tl.tanbeta,...
                             vec0,... tl.Hrms,...
                             vec0,... tl.kabs,...
                             0,... tl.omega,...
                             [vec0 vec0],... tl.udelta,...
                             vec0,... tl.delta_bl,...
                             vec0,... tl.ws,...
                             vec1,... tl.Aw,...
                             vec0,... tl.Sw,...
                             vec0,... tl.Uw,...
                             params0,... tl.params,...
                             bkgd_qtrans);
    D.Q0.Sw(:,i) = tl_qtrans_vanderA(vec0,... tl.d50,...
                             vec0,... tl.d90,...
                             vec0,... tl.h,...
                             vec0,... tl.tanbeta,...
                             vec0,... tl.Hrms,...
                             vec0,... tl.kabs,...
                             0,... tl.omega,...
                             [vec0 vec0],... tl.udelta,...
                             vec0,... tl.delta_bl,...
                             vec0,... tl.ws,...
                             vec0,... tl.Aw,...
                             vec1,... tl.Sw,...
                             vec0,... tl.Uw,...
                             params0,... tl.params,...
                             bkgd_qtrans);
    D.Q0.Uw(:,i) = tl_qtrans_vanderA(vec0,... tl.d50,...
                             vec0,... tl.d90,...
                             vec0,... tl.h,...
                             vec0,... tl.tanbeta,...
                             vec0,... tl.Hrms,...
                             vec0,... tl.kabs,...
                             0,... tl.omega,...
                             [vec0 vec0],... tl.udelta,...
                             vec0,... tl.delta_bl,...
                             vec0,... tl.ws,...
                             vec0,... tl.Aw,...
                             vec0,... tl.Sw,...
                             vec1,... tl.Uw,...
                             params0,... tl.params,...
                             bkgd_qtrans);
  end
  D.Q0.omega(:,1) = tl_qtrans_vanderA(vec0,... tl.d50,...
                           vec0,... tl.d90,...
                           vec0,... tl.h,...
                           vec0,... tl.tanbeta,...
                           vec0,... tl.Hrms,...
                           vec0,... tl.kabs,...
                           1,... tl.omega,...
                           [vec0 vec0],... tl.udelta,...
                           vec0,... tl.delta_bl,...
                           vec0,... tl.ws,...
                           vec0,... tl.Aw,...
                           vec0,... tl.Sw,...
                           vec0,... tl.Uw,...
                           params0,... tl.params,...
                           bkgd_qtrans);
  params1=params0; params1.alpha=1;
  D.Q0.params_alpha(:,1) = tl_qtrans_vanderA(vec0,... tl.d50,...
                           vec0,... tl.d90,...
                           vec0,... tl.h,...
                           vec0,... tl.tanbeta,...
                           vec0,... tl.Hrms,...
                           vec0,... tl.kabs,...
                           0,... tl.omega,...
                           [vec0 vec0],... tl.udelta,...
                           vec0,... tl.delta_bl,...
                           vec0,... tl.ws,...
                           vec0,... tl.Aw,...
                           vec0,... tl.Sw,...
                           vec0,... tl.Uw,...
                           params1,... tl.params,...
                           bkgd_qtrans);
  params1=params0; params1.xi=1;
  D.Q0.params_xi(:,1) = tl_qtrans_vanderA(vec0,... tl.d50,...
                           vec0,... tl.d90,...
                           vec0,... tl.h,...
                           vec0,... tl.tanbeta,...
                           vec0,... tl.Hrms,...
                           vec0,... tl.kabs,...
                           0,... tl.omega,...
                           [vec0 vec0],... tl.udelta,...
                           vec0,... tl.delta_bl,...
                           vec0,... tl.ws,...
                           vec0,... tl.Aw,...
                           vec0,... tl.Sw,...
                           vec0,... tl.Uw,...
                           params1,... tl.params,...
                           bkgd_qtrans);
  params1=params0; params1.m=1;
  D.Q0.params_m(:,1) = tl_qtrans_vanderA(vec0,... tl.d50,...
                           vec0,... tl.d90,...
                           vec0,... tl.h,...
                           vec0,... tl.tanbeta,...
                           vec0,... tl.Hrms,...
                           vec0,... tl.kabs,...
                           0,... tl.omega,...
                           [vec0 vec0],... tl.udelta,...
                           vec0,... tl.delta_bl,...
                           vec0,... tl.ws,...
                           vec0,... tl.Aw,...
                           vec0,... tl.Sw,...
                           vec0,... tl.Uw,...
                           params1,... tl.params,...
                           bkgd_qtrans);
  params1=params0; params1.n=1;
  D.Q0.params_n(:,1) = tl_qtrans_vanderA(vec0,... tl.d50,...
                           vec0,... tl.d90,...
                           vec0,... tl.h,...
                           vec0,... tl.tanbeta,...
                           vec0,... tl.Hrms,...
                           vec0,... tl.kabs,...
                           0,... tl.omega,...
                           [vec0 vec0],... tl.udelta,...
                           vec0,... tl.delta_bl,...
                           vec0,... tl.ws,...
                           vec0,... tl.Aw,...
                           vec0,... tl.Sw,...
                           vec0,... tl.Uw,...
                           params1,... tl.params,...
                           bkgd_qtrans);
else
  error('Full-chain TL only available for vanderA sediment transport module at this time')
end

% mitigate transport discontinuity at the shoreline
% tl.Q1 = tl.Q0;
% tl.Q1(imax:end)=0;
vv=ones(nx,1);
vv(imax:end)=0;
D.Q1.Q0=diag(vv);

% OPTIONAL: Apply horizontal diffusion to Q(x).  Omitted from FC-TL
if(nuQ>0)
  % tl.Q = diffusionSmoother*tl.Q1;
  D.Q.Q1 = diffusionSmoother;
else
  % tl.Q = tl.Q1;
  D.Q.Q1=eye(nx);
end

% rotate output from wave-following coords to cartesian
% tl.Qx = ...
%     + tl.Q.*cos(theta) ...
%     - Q.*sin(theta).*tl.theta;
D.Qx.Q = diag(cos(theta));
D.Qx.theta = -diag(Q.*sin(theta));

% apply masking
% tl.Qx(imask)=0;
for j=1:length(imask)
  D.Qx.Q(:,imask(j))=0;
  D.Qx.Q(imask(j),:)=0;
  D.Qx.theta(:,imask(j))=0;
  D.Qx.theta(imask(j),:)=0;
end

% bathymetry update: dhdt = -dzdt = dQdx.  This is the Exner equation,
% e.g. see Dubarbier et al. (2015) eqn. (16), and note Q is the volumetric
% transport rate (m2/s) including the bed porosity
if(doMarieu)  % use "stable" Marieu formulation for dh/dt
  error('Full-chain TL only available for centered differencing dQdx at this time')
else
  % tl.dQdx = tl_ddx_centered(tl.Qx,x,Qx);
  % tl.dh = tl.dQdx*dt.*wgt;   % apply damping near shore
  for i=1:nx
    vec1=vec0;
    vec1(i)=1;  % comb
    D.dQdx.Qx(:,i) = tl_ddx_centered(vec1,x,Qx);
  end
  D.dh.dQdx = diag(dt*wgt);
  % tl.qp = zeros(nx,1);
end
% tl.dh(isnan(dh))=0;
% tl.hp = tl.h + tl.dh;
